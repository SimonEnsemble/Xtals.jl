# build stages execute sequentially; jobs within a stage execute in parallel
# every job is run on a new VM
stages:
  - prebuild # wherein we install Julia
  - build # wherein we set up the environment and build the package
  - test # wherein we run unit tests and doc-tests in parallel
  - crosstest # wherein we check for breaking changes vs. dev branches of key downstream packages
  - deploy # wherein we build and deploy the documentation


# # # GLOBAL VARS

variables: # accessible to all jobs
  JULIA: "~/julia-1.6.3/bin/julia" # path to Julia binary


# # # PREBUILD STAGE

prebuild-julia: # install Julia
  stage: prebuild
  script:
    - wget https://julialang-s3.julialang.org/bin/linux/x64/1.6/julia-1.6.3-linux-x86_64.tar.gz
    - tar -xf julia-1.6.3-linux-x86_64.tar.gz
  artifacts:
    paths:
      - julia-1.6.3 # save the Julia source and binaries
      - .julia # save the local Julia environment
    expire_in: 1 day # clean up


# # # BUILD STAGE

build-pkg: # test building sans Python
  stage: build
  script:
    - $JULIA --project -e 'import Pkg; Pkg.build("Xtals"); using Xtals'

build-script: # test building w/ Python
  stage: build
  script:
    - $JULIA quick_setup.jl
    - $JULIA --project -e 'import Pkg; Pkg.build("Xtals"); using Xtals'


# # # TEST STAGE

test-unit: # run all the unit tests
  stage: test
  script:
    - $JULIA --project unit_tests.jl

test-docs: # test the code examples in the docs
  stage: test
  script:
    - $JULIA --project -e 'Pkg.add("Documenter"); include("doc_tests.jl")'


# # # CROSSTEST STAGE

crosstest-porousmaterials: # check for breaking changes
  stage: crosstest
  script:
    - $JULIA ./test/cross_dep.jl PorousMaterials

crosstest-porematmod: # check for breaking changes
  stage: crosstest
  script:
    - $JULIA ./test/cross_dep.jl PoreMatMod


# # # DEPLOY STAGE

deploy-docs: # build and deploy the docs
  stage: deploy
  script:
    - $JULIA ./docs/make.jl
